// üöÄ AUTO-COMPLETE CORRIGIDO - AGUARDA CAMPOS CONDICIONAIS
// Cole este c√≥digo no console do navegador (F12) e execute

function preencherFormularioCaseiroCorrigido() {
    console.log('üöÄ Iniciando preenchimento com aguardo de campos condicionais...');
    
    // ===== FUN√á√ïES AUXILIARES MELHORADAS =====
    const aguardarCampo = (selector, timeout = 3000) => {
        return new Promise((resolve) => {
            const elemento = document.querySelector(selector);
            if (elemento) {
                resolve(elemento);
                return;
            }
            
            const observer = new MutationObserver(() => {
                const elemento = document.querySelector(selector);
                if (elemento) {
                    observer.disconnect();
                    resolve(elemento);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true
            });
            
            setTimeout(() => {
                observer.disconnect();
                resolve(null);
            }, timeout);
        });
    };
    
    const preencherCampoSeguro = async (id, valor) => {
        let campo = document.getElementById(id);
        
        if (!campo) {
            console.log(`‚è≥ Aguardando campo: ${id}`);
            campo = await aguardarCampo(`#${id}`);
        }
        
        if (campo) {
            campo.value = valor;
            campo.dispatchEvent(new Event('input', { bubbles: true }));
            campo.dispatchEvent(new Event('change', { bubbles: true }));
            console.log(`‚úÖ ${id}: ${valor}`);
            return true;
        } else {
            console.warn(`‚ö†Ô∏è Campo n√£o encontrado ap√≥s aguardar: ${id}`);
            return false;
        }
    };
    
    const selecionarRadioSeguro = async (name, value) => {
        let radio = document.querySelector(`input[name="${name}"][value="${value}"]`);
        
        if (!radio) {
            console.log(`‚è≥ Aguardando radio: ${name}=${value}`);
            radio = await aguardarCampo(`input[name="${name}"][value="${value}"]`);
        }
        
        if (radio) {
            radio.checked = true;
            radio.dispatchEvent(new Event('change', { bubbles: true }));
            console.log(`‚úÖ ${name}: ${value}`);
            return true;
        } else {
            console.warn(`‚ö†Ô∏è Radio n√£o encontrado: ${name}=${value}`);
            return false;
        }
    };
    
    const selecionarSelectSeguro = async (id, value) => {
        let select = document.getElementById(id);
        
        if (!select) {
            console.log(`‚è≥ Aguardando select: ${id}`);
            select = await aguardarCampo(`#${id}`);
        }
        
        if (select) {
            select.value = value;
            select.dispatchEvent(new Event('change', { bubbles: true }));
            console.log(`‚úÖ ${id}: ${value}`);
            return true;
        } else {
            console.warn(`‚ö†Ô∏è Select n√£o encontrado: ${id}`);
            return false;
        }
    };

    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

    // ===== SEQU√äNCIA DE PREENCHIMENTO =====
    async function executarPreenchimento() {
        try {
            // 1. TREINAMENTO (FUNDAMENTAL - DESBLOQUEIA O RESTO)
            console.log('üìö 1. Configurando treinamento...');
            await selecionarRadioSeguro('aceitaTreinamento', 'sim');
            await delay(500);
            await selecionarSelectSeguro('turnoTreinamento', 'manha');
            await delay(1000);

            // 2. DADOS PESSOAIS
            console.log('üë§ 2. Preenchendo dados pessoais...');
            await preencherCampoSeguro('nomeCompleto', 'Jo√£o Silva Santos');
            await preencherCampoSeguro('dataNascimento', '1985-03-15');
            await preencherCampoSeguro('cpf', '123.456.789-10');
            await preencherCampoSeguro('rg', '12.345.678-9');
            await selecionarSelectSeguro('estadoCivil', 'casado');
            await preencherCampoSeguro('nacionalidade', 'Brasileira');
            await delay(500);

            // 3. CONTATO
            console.log('üìû 3. Preenchendo contatos...');
            await preencherCampoSeguro('telefone', '(11) 99999-8888');
            await preencherCampoSeguro('whatsapp', '(11) 98888-7777');
            await preencherCampoSeguro('email', 'joao.santos@email.com');
            await preencherCampoSeguro('endereco', 'Rua das Flores, 123 - Vila Esperan√ßa, S√£o Paulo, SP');
            await preencherCampoSeguro('cep', '01234-567');
            await delay(500);

            // 4. CNH (CONDICIONAL)
            console.log('üöó 4. Configurando CNH...');
            await selecionarRadioSeguro('possuiCnh', 'sim');
            await delay(300); // Aguardar campo condicional aparecer
            await selecionarSelectSeguro('categoriaCnh', 'B');
            await delay(300);

            // 5. FILHOS (CONDICIONAL)
            console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ 5. Configurando filhos...');
            await selecionarRadioSeguro('temFilhos', 'sim');
            await delay(300); // Aguardar campos condicionais
            await preencherCampoSeguro('quantosFilhos', '2');
            await preencherCampoSeguro('idadesFilhos', '8 e 12 anos');
            await delay(500);

            // 6. EXPERI√äNCIA PROFISSIONAL
            console.log('üíº 6. Experi√™ncia profissional...');
            await selecionarSelectSeguro('tempoExperiencia', '3-5-anos');
            await selecionarRadioSeguro('experienciaAltoPadrao', 'sim');
            await delay(300);
            await preencherCampoSeguro('tempoAltoPadrao', '2 anos');
            await delay(500);

            // 7. REFER√äNCIAS (OBRIGAT√ìRIAS)
            console.log('üìã 7. Preenchendo refer√™ncias...');
            await preencherCampoSeguro('ref1Nome', 'Maria Silva');
            await preencherCampoSeguro('ref1Telefone', '(11) 99988-7766');
            await preencherCampoSeguro('ref1Inicio', '2021-01');
            await preencherCampoSeguro('ref1Fim', '2023-12');
            await selecionarSelectSeguro('ref1Relacao', 'ex-patrao');
            await preencherCampoSeguro('ref1MotivoSaida', 'Mudan√ßa da fam√≠lia para outro estado');
            
            // Refer√™ncia 2 (opcional)
            await preencherCampoSeguro('ref2Nome', 'Carlos Santos');
            await preencherCampoSeguro('ref2Telefone', '(11) 98877-6655');
            await preencherCampoSeguro('ref2Inicio', '2019-03');
            await preencherCampoSeguro('ref2Fim', '2020-12');
            await selecionarSelectSeguro('ref2Relacao', 'supervisor');
            await preencherCampoSeguro('ref2MotivoSaida', 'T√©rmino do contrato');
            await delay(500);

            // 8. √öLTIMO EMPREGO
            console.log('üè¢ 8. √öltimo emprego...');
            await preencherCampoSeguro('ultimoEmpregoEmpresa', 'Fam√≠lia Santos');
            await preencherCampoSeguro('ultimoEmpregoCargo', 'Caseiro');
            await preencherCampoSeguro('ultimoEmpregoTempo', '2 anos e 6 meses');
            await preencherCampoSeguro('ultimoEmpregoSalario', 'R$ 2.300,00');
            await preencherCampoSeguro('ultimoEmpregoAtividades', 'Manuten√ß√£o geral da propriedade, cuidados com jardim, limpeza de √°reas externas, pequenos reparos el√©tricos e hidr√°ulicos.');
            await preencherCampoSeguro('ultimoEmpregoAprendizados', 'Aprendi muito sobre manuten√ß√£o de piscinas e sistemas de irriga√ß√£o autom√°tica.');
            await preencherCampoSeguro('ultimoEmpregoDificuldades', 'Inicialmente tive dificuldades com equipamentos modernos, mas consegui me adaptar.');
            await delay(500);

            // 9. COMPET√äNCIAS T√âCNICAS
            console.log('üîß 9. Compet√™ncias t√©cnicas...');
            await selecionarSelectSeguro('manutencaoEletrica', 'intermediario');
            await selecionarSelectSeguro('manutencaoHidraulica', 'basico');
            await selecionarSelectSeguro('cuidadosJardim', 'intermediario');
            await selecionarSelectSeguro('cuidadosPiscina', 'avancado');
            await selecionarSelectSeguro('experienciaSeguranca', 'basico');
            await selecionarSelectSeguro('automacaoResidencial', 'intermediario');
            
            // Equipamentos
            const equipamentos = ['cortador-grama', 'rocadeira', 'lavadora-alta-pressao'];
            for (const eq of equipamentos) {
                const checkbox = document.querySelector(`input[name="equipamentosJardinagem"][value="${eq}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                    checkbox.dispatchEvent(new Event('change', { bubbles: true }));
                }
            }
            await delay(500);

            // 10. DISPONIBILIDADE
            console.log('üìÖ 10. Disponibilidade...');
            await selecionarRadioSeguro('inicioImediato', 'nao');
            await delay(300);
            await preencherCampoSeguro('dataDisponivel', '2024-09-01');
            await selecionarRadioSeguro('eventosNoturnos', 'ocasionalmente');
            await selecionarRadioSeguro('fimSemana', 'sim-sempre');
            await selecionarRadioSeguro('dormirFimSemana', 'sim');
            await selecionarRadioSeguro('viagens', 'apenas-nacionais');
            await selecionarRadioSeguro('passaporte', 'pode-providenciar');
            await delay(500);

            // 11. MORAR NO LOCAL
            console.log('üè† 11. Moradia no local...');
            await selecionarRadioSeguro('morarLocal', 'sim');
            await delay(300);

            // 12. PRETENS√ïES
            console.log('üí∞ 12. Pretens√µes salariais...');
            await preencherCampoSeguro('pretensaoSalarial', 'R$ 2.800,00');
            await selecionarSelectSeguro('regimeTrabalho', 'clt');
            await selecionarRadioSeguro('negociavel', 'sim');
            await delay(300);

            // 13. CERTIFICA√á√ïES
            console.log('üéì 13. Certifica√ß√µes...');
            const certificacoes = ['primeiros-socorros', 'seguranca-trabalho'];
            for (const cert of certificacoes) {
                const checkbox = document.querySelector(`input[name="certificacoes"][value="${cert}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                    checkbox.dispatchEvent(new Event('change', { bubbles: true }));
                }
            }
            await delay(500);

            // 14. INFORMA√á√ïES COMPLEMENTARES
            console.log('üìù 14. Informa√ß√µes complementares...');
            await selecionarRadioSeguro('restricaoSaude', 'nao');
            await selecionarRadioSeguro('fuma', 'nao');
            await selecionarRadioSeguro('consumeAlcool', 'socialmente');
            await selecionarRadioSeguro('veiculoProprio', 'sim');
            await delay(300);
            await preencherCampoSeguro('tipoVeiculo', 'Carro popular');
            await delay(500);

            // 15. QUEST√ïES PROFISSIONAIS
            console.log('üí¨ 15. Quest√µes profissionais...');
            await preencherCampoSeguro('situacoesEmergencia', 'Mantenho a calma e sigo protocolos de seguran√ßa. Tenho conhecimentos b√°sicos de primeiros socorros.');
            await preencherCampoSeguro('porqueContratar', 'Tenho experi√™ncia s√≥lida, sou confi√°vel e respons√°vel. Cuido da propriedade como se fosse minha.');
            await preencherCampoSeguro('observacoesAdicionais', 'Sou dedicado, pontual e tenho facilidade para aprender novas tecnologias.');
            await delay(1000);

            // 16. DEBUG FINAL
            console.log('üîç 16. Debug final...');
            const telefoneDisplay = document.getElementById('telefone')?.value;
            const telefoneHidden = document.getElementById('telefone_hidden')?.value;
            const whatsappDisplay = document.getElementById('whatsapp')?.value;
            const whatsappHidden = document.getElementById('whatsapp_hidden')?.value;
            
            console.log('üì± RESULTADO DOS TELEFONES:');
            console.log(`Telefone Display: "${telefoneDisplay}" ‚Üí Hidden: "${telefoneHidden}"`);
            console.log(`WhatsApp Display: "${whatsappDisplay}" ‚Üí Hidden: "${whatsappHidden}"`);
            
            if (telefoneHidden?.length >= 12 && whatsappHidden?.length >= 12) {
                console.log('‚úÖ Telefones formatados corretamente!');
            } else {
                console.log('‚ö†Ô∏è Problema na formata√ß√£o dos telefones');
            }
            
            console.log('üéâ Preenchimento conclu√≠do!');
            console.log('üöÄ Formul√°rio pronto para envio');

        } catch (error) {
            console.error('‚ùå Erro durante o preenchimento:', error);
        }
    }

    // Iniciar preenchimento
    executarPreenchimento();
}

// ===== FUN√á√ÉO DE TESTE =====
function testarEnvio() {
    console.log('üß™ Testando envio...');
    const form = document.querySelector('form');
    if (form) {
        const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
        form.dispatchEvent(submitEvent);
    } else {
        console.error('‚ùå Formul√°rio n√£o encontrado');
    }
}

// ===== FUN√á√ÉO DE VERIFICA√á√ÉO =====
function verificarCamposObrigatorios() {
    console.log('üîç Verificando campos obrigat√≥rios...');
    const required = document.querySelectorAll('[required]');
    const vazios = [];
    
    required.forEach(campo => {
        if (!campo.value || campo.value.trim() === '') {
            vazios.push({
                id: campo.id,
                name: campo.name,
                tipo: campo.tagName.toLowerCase(),
                elemento: campo
            });
        }
    });
    
    if (vazios.length > 0) {
        console.log('‚ö†Ô∏è Campos obrigat√≥rios vazios:', vazios);
    } else {
        console.log('‚úÖ Todos os campos obrigat√≥rios preenchidos!');
    }
    
    return vazios;
}

// ===== EXECUTAR =====
console.log('üéØ Comandos dispon√≠veis:');
console.log('preencherFormularioCaseiroCorrigido() // Preencher com aguardo de campos');
console.log('verificarCamposObrigatorios() // Verificar campos vazios');
console.log('testarEnvio() // Testar envio');

// Auto-executar
setTimeout(() => {
    if (confirm('ü§ñ Executar preenchimento autom√°tico inteligente?')) {
        preencherFormularioCaseiroCorrigido();
    }
}, 2000);