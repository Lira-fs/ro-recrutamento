#!/usr/bin/env python3
"""
Script de Configura√ß√£o do Sistema de Backup
R.O Recrutamento
"""

import os
import json
from pathlib import Path

def print_header(text):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"  {text}")
    print("="*60 + "\n")

def print_step(number, text):
    """Imprime n√∫mero do passo"""
    print(f"\n{'='*60}")
    print(f"PASSO {number}: {text}")
    print('='*60 + "\n")

def verificar_estrutura_pastas():
    """Verifica e cria estrutura de pastas necess√°ria"""
    print_step(1, "Verificando Estrutura de Pastas")
    
    pastas_necessarias = [
        'backend',
        'credentials',
        'app',
        'templates'
    ]
    
    for pasta in pastas_necessarias:
        caminho = Path(pasta)
        if caminho.exists():
            print(f"‚úÖ Pasta '{pasta}' encontrada")
        else:
            caminho.mkdir(exist_ok=True)
            print(f"üìÅ Pasta '{pasta}' criada")
    
    return True

def verificar_credenciais_google():
    """Verifica arquivo de credenciais do Google"""
    print_step(2, "Verificando Credenciais do Google Drive")
    
    cred_path = Path('credentials/service-account.json')
    
    if cred_path.exists():
        print(f"‚úÖ Arquivo de credenciais encontrado: {cred_path}")
        
        # Validar JSON
        try:
            with open(cred_path, 'r') as f:
                cred_data = json.load(f)
            
            # Verificar campos obrigat√≥rios
            campos_obrigatorios = [
                'type',
                'project_id',
                'private_key_id',
                'private_key',
                'client_email',
                'client_id'
            ]
            
            campos_faltando = [campo for campo in campos_obrigatorios 
                             if campo not in cred_data]
            
            if campos_faltando:
                print(f"‚ö†Ô∏è Campos faltando no JSON: {', '.join(campos_faltando)}")
                return False
            
            print(f"‚úÖ Arquivo de credenciais v√°lido")
            print(f"üìß Service Account Email: {cred_data['client_email']}")
            print(f"üÜî Project ID: {cred_data['project_id']}")
            
            return True
            
        except json.JSONDecodeError:
            print("‚ùå Arquivo JSON inv√°lido!")
            return False
    else:
        print(f"‚ùå Arquivo de credenciais N√ÉO encontrado: {cred_path}")
        print("\nüìù COMO OBTER AS CREDENCIAIS:")
        print("""
        1. Acesse: https://console.cloud.google.com
        2. Crie um novo projeto (ou use existente)
        3. Ative a API do Google Drive
        4. V√° em: IAM & Admin ‚Üí Service Accounts
        5. Crie uma nova Service Account
        6. Baixe o arquivo JSON das credenciais
        7. Renomeie para 'service-account.json'
        8. Coloque na pasta 'credentials/'
        """)
        return False

def verificar_env():
    """Verifica arquivo .env"""
    print_step(3, "Verificando Arquivo .env")
    
    env_path = Path('.env')
    
    if not env_path.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        return False
    
    # Ler .env
    with open(env_path, 'r') as f:
        env_content = f.read()
    
    # Verificar vari√°veis do Google Drive
    variaveis_necessarias = [
        'GOOGLE_SERVICE_ACCOUNT_FILE',
        'GOOGLE_DRIVE_BACKUP_FOLDER_ID'
    ]
    
    faltando = []
    for var in variaveis_necessarias:
        if var not in env_content:
            faltando.append(var)
            print(f"‚ö†Ô∏è Vari√°vel '{var}' n√£o encontrada no .env")
        else:
            print(f"‚úÖ Vari√°vel '{var}' configurada")
    
    if faltando:
        print("\n‚ùå Configure as vari√°veis faltantes no .env:")
        print("""
        GOOGLE_SERVICE_ACCOUNT_FILE=credentials/service-account.json
        GOOGLE_DRIVE_BACKUP_FOLDER_ID=sua_pasta_id_aqui
        GOOGLE_SERVICE_ACCOUNT_EMAIL=seu-service-account@projeto.iam.gserviceaccount.com
        BACKUP_INTERVAL_HOURS=24
        BACKUP_MAX_RETENTION=30
        BACKUP_AUTO_START=true
        BACKUP_COMPRESSION=true
        """)
        return False
    
    return True

def verificar_dependencias():
    """Verifica se todas as bibliotecas est√£o instaladas"""
    print_step(4, "Verificando Depend√™ncias")
    
    dependencias = [
        ('google-api-python-client', 'googleapiclient'),
        ('google-auth', 'google.auth'),
        ('supabase', 'supabase'),
        ('python-dotenv', 'dotenv'),
        ('schedule', 'schedule')
    ]
    
    todas_instaladas = True
    
    for nome_pip, nome_import in dependencias:
        try:
            __import__(nome_import)
            print(f"‚úÖ {nome_pip}")
        except ImportError:
            print(f"‚ùå {nome_pip} N√ÉO instalado")
            todas_instaladas = False
    
    if not todas_instaladas:
        print("\nüì¶ Instale as depend√™ncias faltantes:")
        print("pip install -r requirements.txt")
        return False
    
    return True

def testar_conexao_drive():
    """Testa conex√£o com Google Drive"""
    print_step(5, "Testando Conex√£o com Google Drive")
    
    try:
        from dotenv import load_dotenv
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        
        load_dotenv()
        
        service_account_file = os.getenv('GOOGLE_SERVICE_ACCOUNT_FILE')
        
        if not service_account_file or not os.path.exists(service_account_file):
            print("‚ùå Arquivo de credenciais n√£o encontrado")
            return False
        
        credentials = service_account.Credentials.from_service_account_file(
            service_account_file,
            scopes=['https://www.googleapis.com/auth/drive.file']
        )
        
        service = build('drive', 'v3', credentials=credentials)
        
        # Testar listagem
        results = service.files().list(pageSize=1).execute()
        
        print("‚úÖ Conex√£o com Google Drive estabelecida com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar no Google Drive: {e}")
        return False

def testar_backup_completo():
    """Executa teste completo de backup"""
    print_step(6, "Executando Teste de Backup")
    
    try:
        import sys
        sys.path.append('backend')
        
        from google_drive_backup import criar_backup_automatico
        
        print("üîÑ Criando backup de teste...")
        sucesso, file_id = criar_backup_automatico()
        
        if sucesso:
            print(f"‚úÖ Backup de teste criado com sucesso!")
            print(f"üÜî File ID: {file_id}")
            return True
        else:
            print("‚ùå Falha ao criar backup de teste")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de backup: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    print_header("CONFIGURA√á√ÉO DO SISTEMA DE BACKUP")
    print("R.O Recrutamento - Sistema de Gest√£o")
    
    print("\nüéØ Este script ir√°:")
    print("  1. Verificar estrutura de pastas")
    print("  2. Validar credenciais do Google Drive")
    print("  3. Verificar arquivo .env")
    print("  4. Testar depend√™ncias")
    print("  5. Testar conex√£o com Google Drive")
    print("  6. Executar backup de teste")
    
    continuar = input("\n‚ùì Continuar? (s/n): ")
    
    if continuar.lower() != 's':
        print("‚ùå Configura√ß√£o cancelada")
        return
    
    # Executar verifica√ß√µes
    resultados = []
    
    resultados.append(("Estrutura de Pastas", verificar_estrutura_pastas()))
    resultados.append(("Credenciais Google", verificar_credenciais_google()))
    resultados.append(("Arquivo .env", verificar_env()))
    resultados.append(("Depend√™ncias", verificar_dependencias()))
    resultados.append(("Conex√£o Drive", testar_conexao_drive()))
    resultados.append(("Backup Teste", testar_backup_completo()))
    
    # Resumo
    print_header("RESUMO DA CONFIGURA√á√ÉO")
    
    for nome, sucesso in resultados:
        status = "‚úÖ" if sucesso else "‚ùå"
        print(f"{status} {nome}")
    
    todos_ok = all(resultado[1] for resultado in resultados)
    
    if todos_ok:
        print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("\n‚úÖ Sistema de backup est√° pronto para uso")
        print("\nüí° Pr√≥ximos passos:")
        print("  1. Execute: streamlit run app/streamlit_app.py")
        print("  2. Acesse a aba 'üíæ Backups' no dashboard")
        print("  3. Crie seu primeiro backup manual")
    else:
        print("\n‚ö†Ô∏è CONFIGURA√á√ÉO INCOMPLETA")
        print("Corrija os problemas acima e execute este script novamente")

if __name__ == "__main__":
    main()