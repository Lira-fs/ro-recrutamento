# backend/logger.py
"""
Sistema de logging estruturado
Grava erros t√©cnicos em arquivo, exibe mensagens amig√°veis para usu√°rios
"""

import logging
import os
from datetime import datetime
from pathlib import Path
import streamlit as st

# =====================================
# CONFIGURA√á√ÉO DO LOGGER
# =====================================

# Criar pasta de logs se n√£o existir
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

# Nome do arquivo de log (rotaciona diariamente)
LOG_FILE = LOG_DIR / f"app_{datetime.now().strftime('%Y%m%d')}.log"

# Configurar logger
logger = logging.getLogger("ro_recrutamento")
logger.setLevel(logging.DEBUG)

# Handler para arquivo (grava tudo)
file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
file_handler.setLevel(logging.DEBUG)

# Formato detalhado para arquivo
file_format = logging.Formatter(
    '%(asctime)s | %(levelname)-8s | %(name)s | %(funcName)s:%(lineno)d | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
file_handler.setFormatter(file_format)

# Handler para console (apenas INFO+)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_format = logging.Formatter('%(levelname)s: %(message)s')
console_handler.setFormatter(console_format)

# Adicionar handlers
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# =====================================
# MODO DEBUG
# =====================================

DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"


# =====================================
# FUN√á√ïES DE LOGGING
# =====================================

def log_erro(mensagem_usuario: str, excecao: Exception, contexto: dict = None):
    """
    Registra erro com detalhes t√©cnicos no arquivo
    Exibe mensagem amig√°vel para usu√°rio
    
    Args:
        mensagem_usuario: Mensagem exibida na interface
        excecao: Exception capturada
        contexto: Dict com informa√ß√µes adicionais
    """
    import traceback
    
    # Construir mensagem t√©cnica para arquivo
    contexto_str = ""
    if contexto:
        contexto_str = " | ".join([f"{k}={v}" for k, v in contexto.items()])
    
    # Gravar no arquivo com stack trace completo
    logger.error(
        f"{mensagem_usuario} | Contexto: {contexto_str} | "
        f"Exce√ß√£o: {type(excecao).__name__}: {str(excecao)} | "
        f"Traceback: {traceback.format_exc()}"
    )
    
    # Exibir para usu√°rio
    if DEBUG_MODE:
        # Modo desenvolvimento: mostrar detalhes
        st.error(f"‚ùå {mensagem_usuario}")
        with st.expander("üîç Detalhes T√©cnicos (DEBUG MODE)"):
            st.code(traceback.format_exc())
    else:
        # Modo produ√ß√£o: mensagem gen√©rica
        st.error(f"‚ùå {mensagem_usuario}")
        st.info("üí° Se o problema persistir, contate o administrador.")


def log_aviso(mensagem: str, contexto: dict = None):
    """
    Registra aviso
    
    Args:
        mensagem: Mensagem de aviso
        contexto: Dict com informa√ß√µes adicionais
    """
    contexto_str = ""
    if contexto:
        contexto_str = " | ".join([f"{k}={v}" for k, v in contexto.items()])
    
    logger.warning(f"{mensagem} | Contexto: {contexto_str}")


def log_info(mensagem: str, contexto: dict = None):
    """
    Registra informa√ß√£o
    
    Args:
        mensagem: Mensagem informativa
        contexto: Dict com informa√ß√µes adicionais
    """
    contexto_str = ""
    if contexto:
        contexto_str = " | ".join([f"{k}={v}" for k, v in contexto.items()])
    
    logger.info(f"{mensagem} | Contexto: {contexto_str}")


def log_sucesso(acao: str, usuario: str = "Sistema", detalhes: dict = None):
    """
    Registra a√ß√£o bem-sucedida (auditoria)
    
    Args:
        acao: A√ß√£o realizada
        usuario: Quem realizou
        detalhes: Detalhes adicionais
    """
    detalhes_str = ""
    if detalhes:
        detalhes_str = " | ".join([f"{k}={v}" for k, v in detalhes.items()])
    
    logger.info(f"SUCESSO: {acao} | Usu√°rio: {usuario} | Detalhes: {detalhes_str}")


def log_auditoria(acao: str, usuario: str, dados: dict):
    """
    Registra a√ß√£o cr√≠tica para auditoria
    
    Args:
        acao: Tipo de a√ß√£o (criar_relacionamento, atualizar_status, etc)
        usuario: Username
        dados: Dados da opera√ß√£o
    """
    import json
    
    logger.info(
        f"AUDITORIA: {acao} | "
        f"Usu√°rio: {usuario} | "
        f"Timestamp: {datetime.now().isoformat()} | "
        f"Dados: {json.dumps(dados, ensure_ascii=False)}"
    )


# =====================================
# DECORADOR PARA TRATAMENTO AUTOM√ÅTICO
# =====================================

def tratar_erros(mensagem_usuario: str = "Erro ao processar opera√ß√£o"):
    """
    Decorador para tratamento autom√°tico de erros
    
    Usage:
        @tratar_erros("Erro ao carregar candidatos")
        def carregar_candidatos():
            ...
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                log_erro(
                    mensagem_usuario=mensagem_usuario,
                    excecao=e,
                    contexto={
                        'funcao': func.__name__,
                        'args': str(args)[:100],
                        'kwargs': str(kwargs)[:100]
                    }
                )
                return None
        return wrapper
    return decorator